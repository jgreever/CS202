==1068327== Memcheck, a memory error detector
==1068327== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1068327== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==1068327== Command: ./Prog2
==1068327== Parent PID: 1066518
==1068327== 
==1068327== 
==1068327== HEAP SUMMARY:
==1068327==     in use at exit: 176 bytes in 4 blocks
==1068327==   total heap usage: 11 allocs, 7 frees, 74,952 bytes allocated
==1068327== 
==1068327== 40 bytes in 1 blocks are indirectly lost in loss record 1 of 4
==1068327==    at 0x483CE63: operator new(unsigned long) (vg_replace_malloc.c:342)
==1068327==    by 0x10981D: calendar::add(entry*&) (calendar.cpp:69)
==1068327==    by 0x10942E: main (main.cpp:80)
==1068327== 
==1068327== 40 bytes in 1 blocks are indirectly lost in loss record 2 of 4
==1068327==    at 0x483CE63: operator new(unsigned long) (vg_replace_malloc.c:342)
==1068327==    by 0x10981D: calendar::add(entry*&) (calendar.cpp:69)
==1068327==    by 0x1094D1: main (main.cpp:90)
==1068327== 
==1068327== 88 (48 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 3 of 4
==1068327==    at 0x483CE63: operator new(unsigned long) (vg_replace_malloc.c:342)
==1068327==    by 0x1097FC: calendar::add(entry*&) (calendar.cpp:67)
==1068327==    by 0x10942E: main (main.cpp:80)
==1068327== 
==1068327== 88 (48 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 4 of 4
==1068327==    at 0x483CE63: operator new(unsigned long) (vg_replace_malloc.c:342)
==1068327==    by 0x1097FC: calendar::add(entry*&) (calendar.cpp:67)
==1068327==    by 0x1094D1: main (main.cpp:90)
==1068327== 
==1068327== LEAK SUMMARY:
==1068327==    definitely lost: 96 bytes in 2 blocks
==1068327==    indirectly lost: 80 bytes in 2 blocks
==1068327==      possibly lost: 0 bytes in 0 blocks
==1068327==    still reachable: 0 bytes in 0 blocks
==1068327==         suppressed: 0 bytes in 0 blocks
==1068327== 
==1068327== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
